
5_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000238  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003fc  08000404  00001404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003fc  080003fc  00001404  2**0
                  CONTENTS
  4 .ARM          00000000  080003fc  080003fc  00001404  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003fc  08000404  00001404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003fc  080003fc  000013fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000400  08000400  00001400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000404  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000404  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000046d  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000018a  00000000  00000000  000018a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00001a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000045  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a7a  00000000  00000000  00001add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000690  00000000  00000000  0001a557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b197  00000000  00000000  0001abe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5d7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ec  00000000  00000000  000a5dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000a5eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003e4 	.word	0x080003e4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003e4 	.word	0x080003e4

08000204 <main>:

void uar2_tx_init(void);
void uart2_write (int ch);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0

	uar2_tx_init();
 800020a:	f000 f829 	bl	8000260 <uar2_tx_init>

	while (1)
	{
		uart2_write('Y');
 800020e:	2059      	movs	r0, #89	@ 0x59
 8000210:	f000 f80e 	bl	8000230 <uart2_write>
		for(int i=0;i<10000000;i++){}
 8000214:	2300      	movs	r3, #0
 8000216:	607b      	str	r3, [r7, #4]
 8000218:	e002      	b.n	8000220 <main+0x1c>
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	3301      	adds	r3, #1
 800021e:	607b      	str	r3, [r7, #4]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a02      	ldr	r2, [pc, #8]	@ (800022c <main+0x28>)
 8000224:	4293      	cmp	r3, r2
 8000226:	dbf8      	blt.n	800021a <main+0x16>
		uart2_write('Y');
 8000228:	e7f1      	b.n	800020e <main+0xa>
 800022a:	bf00      	nop
 800022c:	00989680 	.word	0x00989680

08000230 <uart2_write>:

	}

}
void uart2_write (int ch)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty  */
	while(!(USART2->SR & SR_TXE)){}
 8000238:	bf00      	nop
 800023a:	4b08      	ldr	r3, [pc, #32]	@ (800025c <uart2_write+0x2c>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0f9      	beq.n	800023a <uart2_write+0xa>
	/*write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a04      	ldr	r2, [pc, #16]	@ (800025c <uart2_write+0x2c>)
 800024a:	b2db      	uxtb	r3, r3
 800024c:	6053      	str	r3, [r2, #4]
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40004400 	.word	0x40004400

08000260 <uar2_tx_init>:
void uar2_tx_init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	/*Configuration UART gpio pin*/
	/*Enable clock access to gpioa*/
	RCC->AHB1ENR |= GPIOAEN;
 8000264:	4b21      	ldr	r3, [pc, #132]	@ (80002ec <uar2_tx_init+0x8c>)
 8000266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000268:	4a20      	ldr	r2, [pc, #128]	@ (80002ec <uar2_tx_init+0x8c>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	6313      	str	r3, [r2, #48]	@ 0x30
	/*set PA2 to alternate function mode*/
	GPIOA->MODER |=(1U<<5);
 8000270:	4b1f      	ldr	r3, [pc, #124]	@ (80002f0 <uar2_tx_init+0x90>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a1e      	ldr	r2, [pc, #120]	@ (80002f0 <uar2_tx_init+0x90>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<4);
 800027c:	4b1c      	ldr	r3, [pc, #112]	@ (80002f0 <uar2_tx_init+0x90>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1b      	ldr	r2, [pc, #108]	@ (80002f0 <uar2_tx_init+0x90>)
 8000282:	f023 0310 	bic.w	r3, r3, #16
 8000286:	6013      	str	r3, [r2, #0]
	/*set PA2 to alternate function to UART_Tx  AF7*/
	GPIOA->AFR[0] |=(1U<<8);
 8000288:	4b19      	ldr	r3, [pc, #100]	@ (80002f0 <uar2_tx_init+0x90>)
 800028a:	6a1b      	ldr	r3, [r3, #32]
 800028c:	4a18      	ldr	r2, [pc, #96]	@ (80002f0 <uar2_tx_init+0x90>)
 800028e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000292:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000294:	4b16      	ldr	r3, [pc, #88]	@ (80002f0 <uar2_tx_init+0x90>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a15      	ldr	r2, [pc, #84]	@ (80002f0 <uar2_tx_init+0x90>)
 800029a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800029e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80002a0:	4b13      	ldr	r3, [pc, #76]	@ (80002f0 <uar2_tx_init+0x90>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a12      	ldr	r2, [pc, #72]	@ (80002f0 <uar2_tx_init+0x90>)
 80002a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80002ac:	4b10      	ldr	r3, [pc, #64]	@ (80002f0 <uar2_tx_init+0x90>)
 80002ae:	6a1b      	ldr	r3, [r3, #32]
 80002b0:	4a0f      	ldr	r2, [pc, #60]	@ (80002f0 <uar2_tx_init+0x90>)
 80002b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002b6:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART 2*/
	RCC->APB1ENR |= UART2EN;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <uar2_tx_init+0x8c>)
 80002ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002bc:	4a0b      	ldr	r2, [pc, #44]	@ (80002ec <uar2_tx_init+0x8c>)
 80002be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002c2:	6413      	str	r3, [r2, #64]	@ 0x40

	/*configure baudrate*/
	set_uart_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80002c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002c8:	490a      	ldr	r1, [pc, #40]	@ (80002f4 <uar2_tx_init+0x94>)
 80002ca:	480b      	ldr	r0, [pc, #44]	@ (80002f8 <uar2_tx_init+0x98>)
 80002cc:	f000 f816 	bl	80002fc <set_uart_baudrate>

	/*configure the transfer direction  */
	USART2->CR1 |=CR1_TE;
 80002d0:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <uar2_tx_init+0x98>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4a08      	ldr	r2, [pc, #32]	@ (80002f8 <uar2_tx_init+0x98>)
 80002d6:	f043 0308 	orr.w	r3, r3, #8
 80002da:	60d3      	str	r3, [r2, #12]

	/*Enable UART*/
	USART2->CR1 |=CR1_UE;
 80002dc:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <uar2_tx_init+0x98>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a05      	ldr	r2, [pc, #20]	@ (80002f8 <uar2_tx_init+0x98>)
 80002e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002e6:	60d3      	str	r3, [r2, #12]


}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40023800 	.word	0x40023800
 80002f0:	40020000 	.word	0x40020000
 80002f4:	00f42400 	.word	0x00f42400
 80002f8:	40004400 	.word	0x40004400

080002fc <set_uart_baudrate>:

static void set_uart_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	60b9      	str	r1, [r7, #8]
 8000306:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk,BaudRate);
 8000308:	6879      	ldr	r1, [r7, #4]
 800030a:	68b8      	ldr	r0, [r7, #8]
 800030c:	f000 f808 	bl	8000320 <compute_uart_div>
 8000310:	4603      	mov	r3, r0
 8000312:	461a      	mov	r2, r3
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	609a      	str	r2, [r3, #8]
}
 8000318:	bf00      	nop
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
	return ((PeriphClk +(BaudRate/2U))/BaudRate);
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	085a      	lsrs	r2, r3, #1
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	441a      	add	r2, r3
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	fbb2 f3f3 	udiv	r3, r2, r3
 8000338:	b29b      	uxth	r3, r3
}
 800033a:	4618      	mov	r0, r3
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
	...

08000348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000348:	480d      	ldr	r0, [pc, #52]	@ (8000380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800034c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000350:	480c      	ldr	r0, [pc, #48]	@ (8000384 <LoopForever+0x6>)
  ldr r1, =_edata
 8000352:	490d      	ldr	r1, [pc, #52]	@ (8000388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000354:	4a0d      	ldr	r2, [pc, #52]	@ (800038c <LoopForever+0xe>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800035c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000366:	4a0a      	ldr	r2, [pc, #40]	@ (8000390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000368:	4c0a      	ldr	r4, [pc, #40]	@ (8000394 <LoopForever+0x16>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000376:	f000 f811 	bl	800039c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037a:	f7ff ff43 	bl	8000204 <main>

0800037e <LoopForever>:

LoopForever:
  b LoopForever
 800037e:	e7fe      	b.n	800037e <LoopForever>
  ldr   r0, =_estack
 8000380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800038c:	08000404 	.word	0x08000404
  ldr r2, =_sbss
 8000390:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000394:	2000001c 	.word	0x2000001c

08000398 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC_IRQHandler>
	...

0800039c <__libc_init_array>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	4d0d      	ldr	r5, [pc, #52]	@ (80003d4 <__libc_init_array+0x38>)
 80003a0:	4c0d      	ldr	r4, [pc, #52]	@ (80003d8 <__libc_init_array+0x3c>)
 80003a2:	1b64      	subs	r4, r4, r5
 80003a4:	10a4      	asrs	r4, r4, #2
 80003a6:	2600      	movs	r6, #0
 80003a8:	42a6      	cmp	r6, r4
 80003aa:	d109      	bne.n	80003c0 <__libc_init_array+0x24>
 80003ac:	4d0b      	ldr	r5, [pc, #44]	@ (80003dc <__libc_init_array+0x40>)
 80003ae:	4c0c      	ldr	r4, [pc, #48]	@ (80003e0 <__libc_init_array+0x44>)
 80003b0:	f000 f818 	bl	80003e4 <_init>
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	2600      	movs	r6, #0
 80003ba:	42a6      	cmp	r6, r4
 80003bc:	d105      	bne.n	80003ca <__libc_init_array+0x2e>
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c4:	4798      	blx	r3
 80003c6:	3601      	adds	r6, #1
 80003c8:	e7ee      	b.n	80003a8 <__libc_init_array+0xc>
 80003ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ce:	4798      	blx	r3
 80003d0:	3601      	adds	r6, #1
 80003d2:	e7f2      	b.n	80003ba <__libc_init_array+0x1e>
 80003d4:	080003fc 	.word	0x080003fc
 80003d8:	080003fc 	.word	0x080003fc
 80003dc:	080003fc 	.word	0x080003fc
 80003e0:	08000400 	.word	0x08000400

080003e4 <_init>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr

080003f0 <_fini>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr
